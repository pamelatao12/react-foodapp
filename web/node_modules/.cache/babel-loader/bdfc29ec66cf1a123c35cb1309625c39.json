{"ast":null,"code":"var _jsxFileName = \"/Users/pamelatao/my-app/web/src/common/authentication/context-provider.jsx\";\nimport firebase from \"firebase\";\nimport { AuthenticationContext } from \"./context\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst initializeFirebase = () => {\n  const hasNotInitialized = firebase.apps.length === 0;\n\n  if (hasNotInitialized) {\n    const firebaseConfig = {\n      apiKey: \"AIzaSyDuNOydKrqTXzF6T_thCiuAoat1vRGB0Ps\",\n      authDomain: \"food-app-01.firebaseapp.com\",\n      databaseURL: \"https://food-app-01.firebaseio.com\",\n      projectId: \"food-app-01\",\n      storageBucket: \"food-app-01.appspot.com\",\n      messagingSenderId: \"414171254544\",\n      appId: \"1:414171254544:web:f99f34c3911755e1499f95\",\n      measurementId: \"G-HYPLTWM846\"\n    };\n    firebase.initializeApp(firebaseConfig);\n  }\n\n  return firebase.auth();\n};\n\nexport const AuthenticationContextProvider = ({\n  children\n}) => {\n  const firebaseAuthApi = initializeFirebase();\n  const history = useHistory();\n  const [state, setState] = useState({\n    authenticationToken: undefined,\n    firebaseUser: undefined,\n    hasFirebaseLoaded: false,\n    isLoggedIn: false,\n    userId: undefined\n  });\n\n  const onAuthStateChanged = async firebaseUser => {\n    const authenticationToken = firebaseUser ? await firebaseUser.getIdToken() : undefined;\n    setState(prevState => ({ ...prevState,\n      authenticationToken,\n      firebaseUser,\n      hasFirebaseLoaded: true,\n      isLoggedIn: !!firebaseUser,\n      userId: firebaseUser && firebaseUser.uid\n    }));\n  };\n\n  useEffect(() => {\n    firebaseAuthApi.onAuthStateChanged(onAuthStateChanged);\n  }, []);\n\n  const logIn = async (email, password, autoRedirectTo) => {\n    const userCreds = await firebaseAuthApi.signInWithEmailAndPassword(email, password);\n    const firebaseUser = userCreds.user;\n    await onAuthStateChanged(firebaseUser);\n\n    if (autoRedirectTo) {\n      history.push(autoRedirectTo);\n    }\n  };\n\n  if (!state.hasFirebaseLoaded) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \"Loading...\");\n  }\n\n  const signOut = () => {\n    firebase.auth().signOut().then(function () {// Sign-out successful.\n    }).catch(function (error) {// An error happened.\n    });\n  };\n\n  const createAccount = (email, password) => {\n    firebase.auth().createUserWithEmailAndPassword(email, password).catch(function (error) {\n      // Handle Errors here.\n      var errorCode = error.code;\n      var errorMessage = error.message; // ...\n    });\n  };\n\n  const addUserToDatabase = async () => {\n    try {\n      const response = await fetch(`http://localhost:4000/search?term=${searchKeyword}&location=${searchLocation}&limit=20`, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\"\n        }\n      });\n      const responseJson = await response.json();\n      setLoading(false);\n      console.log(\"review data\", responseJson.reviews);\n      console.log(\"data was fetched\", responseJson.search.business); // setFirstThreeReviews(responseJson.reviews);\n\n      setData(responseJson.search.business);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return React.createElement(AuthenticationContext.Provider, {\n    value: { ...state,\n      logIn,\n      createAccount,\n      signOut\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, children);\n};","map":{"version":3,"sources":["/Users/pamelatao/my-app/web/src/common/authentication/context-provider.jsx"],"names":["firebase","AuthenticationContext","React","useEffect","useState","useHistory","initializeFirebase","hasNotInitialized","apps","length","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","auth","AuthenticationContextProvider","children","firebaseAuthApi","history","state","setState","authenticationToken","undefined","firebaseUser","hasFirebaseLoaded","isLoggedIn","userId","onAuthStateChanged","getIdToken","prevState","uid","logIn","email","password","autoRedirectTo","userCreds","signInWithEmailAndPassword","user","push","signOut","then","catch","error","createAccount","createUserWithEmailAndPassword","errorCode","code","errorMessage","message","addUserToDatabase","response","fetch","searchKeyword","searchLocation","headers","Accept","responseJson","json","setLoading","console","log","reviews","search","business","setData"],"mappings":";AAAA,OAAOA,QAAP,MAAqB,UAArB;AACA,SAASC,qBAAT,QAAsC,WAAtC;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,UAAT,QAA2B,kBAA3B;;AAEA,MAAMC,kBAAkB,GAAG,MAAM;AAC/B,QAAMC,iBAAiB,GAAGP,QAAQ,CAACQ,IAAT,CAAcC,MAAd,KAAyB,CAAnD;;AACA,MAAIF,iBAAJ,EAAuB;AACrB,UAAMG,cAAc,GAAG;AACrBC,MAAAA,MAAM,EAAE,yCADa;AAErBC,MAAAA,UAAU,EAAE,6BAFS;AAGrBC,MAAAA,WAAW,EAAE,oCAHQ;AAIrBC,MAAAA,SAAS,EAAE,aAJU;AAKrBC,MAAAA,aAAa,EAAE,yBALM;AAMrBC,MAAAA,iBAAiB,EAAE,cANE;AAOrBC,MAAAA,KAAK,EAAE,2CAPc;AAQrBC,MAAAA,aAAa,EAAE;AARM,KAAvB;AAWAlB,IAAAA,QAAQ,CAACmB,aAAT,CAAuBT,cAAvB;AACD;;AAED,SAAOV,QAAQ,CAACoB,IAAT,EAAP;AACD,CAlBD;;AAoBA,OAAO,MAAMC,6BAA6B,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAC7D,QAAMC,eAAe,GAAGjB,kBAAkB,EAA1C;AACA,QAAMkB,OAAO,GAAGnB,UAAU,EAA1B;AAEA,QAAM,CAACoB,KAAD,EAAQC,QAAR,IAAoBtB,QAAQ,CAAC;AACjCuB,IAAAA,mBAAmB,EAAEC,SADY;AAEjCC,IAAAA,YAAY,EAAED,SAFmB;AAGjCE,IAAAA,iBAAiB,EAAE,KAHc;AAIjCC,IAAAA,UAAU,EAAE,KAJqB;AAKjCC,IAAAA,MAAM,EAAEJ;AALyB,GAAD,CAAlC;;AAQA,QAAMK,kBAAkB,GAAG,MAAMJ,YAAN,IAAsB;AAC/C,UAAMF,mBAAmB,GAAGE,YAAY,GACpC,MAAMA,YAAY,CAACK,UAAb,EAD8B,GAEpCN,SAFJ;AAIAF,IAAAA,QAAQ,CAACS,SAAS,KAAK,EACrB,GAAGA,SADkB;AAErBR,MAAAA,mBAFqB;AAGrBE,MAAAA,YAHqB;AAIrBC,MAAAA,iBAAiB,EAAE,IAJE;AAKrBC,MAAAA,UAAU,EAAE,CAAC,CAACF,YALO;AAMrBG,MAAAA,MAAM,EAAEH,YAAY,IAAIA,YAAY,CAACO;AANhB,KAAL,CAAV,CAAR;AAQD,GAbD;;AAeAjC,EAAAA,SAAS,CAAC,MAAM;AACdoB,IAAAA,eAAe,CAACU,kBAAhB,CAAmCA,kBAAnC;AACD,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMI,KAAK,GAAG,OAAOC,KAAP,EAAcC,QAAd,EAAwBC,cAAxB,KAA2C;AACvD,UAAMC,SAAS,GAAG,MAAMlB,eAAe,CAACmB,0BAAhB,CACtBJ,KADsB,EAEtBC,QAFsB,CAAxB;AAIA,UAAMV,YAAY,GAAGY,SAAS,CAACE,IAA/B;AACA,UAAMV,kBAAkB,CAACJ,YAAD,CAAxB;;AAEA,QAAIW,cAAJ,EAAoB;AAClBhB,MAAAA,OAAO,CAACoB,IAAR,CAAaJ,cAAb;AACD;AACF,GAXD;;AAaA,MAAI,CAACf,KAAK,CAACK,iBAAX,EAA8B;AAC5B,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AACD;;AAED,QAAMe,OAAO,GAAG,MAAM;AACpB7C,IAAAA,QAAQ,CACLoB,IADH,GAEGyB,OAFH,GAGGC,IAHH,CAGQ,YAAW,CACf;AACD,KALH,EAMGC,KANH,CAMS,UAASC,KAAT,EAAgB,CACrB;AACD,KARH;AASD,GAVD;;AAYA,QAAMC,aAAa,GAAG,CAACX,KAAD,EAAQC,QAAR,KAAqB;AACzCvC,IAAAA,QAAQ,CACLoB,IADH,GAEG8B,8BAFH,CAEkCZ,KAFlC,EAEyCC,QAFzC,EAGGQ,KAHH,CAGS,UAASC,KAAT,EAAgB;AACrB;AACA,UAAIG,SAAS,GAAGH,KAAK,CAACI,IAAtB;AACA,UAAIC,YAAY,GAAGL,KAAK,CAACM,OAAzB,CAHqB,CAIrB;AACD,KARH;AASD,GAVD;;AAYA,QAAMC,iBAAiB,GAAG,YAAY;AACpC,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CACzB,qCAAoCC,aAAc,aAAYC,cAAe,WADpD,EAE1B;AACEC,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEPC,UAAAA,MAAM,EAAE;AAFD;AADX,OAF0B,CAA5B;AASA,YAAMC,YAAY,GAAG,MAAMN,QAAQ,CAACO,IAAT,EAA3B;AACAC,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BJ,YAAY,CAACK,OAAxC;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCJ,YAAY,CAACM,MAAb,CAAoBC,QAApD,EAbE,CAcF;;AACAC,MAAAA,OAAO,CAACR,YAAY,CAACM,MAAb,CAAoBC,QAArB,CAAP;AACD,KAhBD,CAgBE,OAAOrB,KAAP,EAAc;AACdiB,MAAAA,OAAO,CAACC,GAAR,CAAYlB,KAAZ;AACD;AACF,GApBD;;AAsBA,SACE,oBAAC,qBAAD,CAAuB,QAAvB;AACE,IAAA,KAAK,EAAE,EACL,GAAGvB,KADE;AAELY,MAAAA,KAFK;AAGLY,MAAAA,aAHK;AAILJ,MAAAA;AAJK,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQGvB,QARH,CADF;AAYD,CA1GM","sourcesContent":["import firebase from \"firebase\";\nimport { AuthenticationContext } from \"./context\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst initializeFirebase = () => {\n  const hasNotInitialized = firebase.apps.length === 0;\n  if (hasNotInitialized) {\n    const firebaseConfig = {\n      apiKey: \"AIzaSyDuNOydKrqTXzF6T_thCiuAoat1vRGB0Ps\",\n      authDomain: \"food-app-01.firebaseapp.com\",\n      databaseURL: \"https://food-app-01.firebaseio.com\",\n      projectId: \"food-app-01\",\n      storageBucket: \"food-app-01.appspot.com\",\n      messagingSenderId: \"414171254544\",\n      appId: \"1:414171254544:web:f99f34c3911755e1499f95\",\n      measurementId: \"G-HYPLTWM846\"\n    };\n\n    firebase.initializeApp(firebaseConfig);\n  }\n\n  return firebase.auth();\n};\n\nexport const AuthenticationContextProvider = ({ children }) => {\n  const firebaseAuthApi = initializeFirebase();\n  const history = useHistory();\n\n  const [state, setState] = useState({\n    authenticationToken: undefined,\n    firebaseUser: undefined,\n    hasFirebaseLoaded: false,\n    isLoggedIn: false,\n    userId: undefined\n  });\n\n  const onAuthStateChanged = async firebaseUser => {\n    const authenticationToken = firebaseUser\n      ? await firebaseUser.getIdToken()\n      : undefined;\n\n    setState(prevState => ({\n      ...prevState,\n      authenticationToken,\n      firebaseUser,\n      hasFirebaseLoaded: true,\n      isLoggedIn: !!firebaseUser,\n      userId: firebaseUser && firebaseUser.uid\n    }));\n  };\n\n  useEffect(() => {\n    firebaseAuthApi.onAuthStateChanged(onAuthStateChanged);\n  }, []);\n\n  const logIn = async (email, password, autoRedirectTo) => {\n    const userCreds = await firebaseAuthApi.signInWithEmailAndPassword(\n      email,\n      password\n    );\n    const firebaseUser = userCreds.user;\n    await onAuthStateChanged(firebaseUser);\n\n    if (autoRedirectTo) {\n      history.push(autoRedirectTo);\n    }\n  };\n\n  if (!state.hasFirebaseLoaded) {\n    return <div>Loading...</div>;\n  }\n\n  const signOut = () => {\n    firebase\n      .auth()\n      .signOut()\n      .then(function() {\n        // Sign-out successful.\n      })\n      .catch(function(error) {\n        // An error happened.\n      });\n  };\n\n  const createAccount = (email, password) => {\n    firebase\n      .auth()\n      .createUserWithEmailAndPassword(email, password)\n      .catch(function(error) {\n        // Handle Errors here.\n        var errorCode = error.code;\n        var errorMessage = error.message;\n        // ...\n      });\n  };\n\n  const addUserToDatabase = async () => {\n    try {\n      const response = await fetch(\n        `http://localhost:4000/search?term=${searchKeyword}&location=${searchLocation}&limit=20`,\n        {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Accept: \"application/json\"\n          }\n        }\n      );\n      const responseJson = await response.json();\n      setLoading(false);\n      console.log(\"review data\", responseJson.reviews);\n      console.log(\"data was fetched\", responseJson.search.business);\n      // setFirstThreeReviews(responseJson.reviews);\n      setData(responseJson.search.business);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <AuthenticationContext.Provider\n      value={{\n        ...state,\n        logIn,\n        createAccount,\n        signOut\n      }}\n    >\n      {children}\n    </AuthenticationContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}